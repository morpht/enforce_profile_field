<?php

/**
 * @file
 * Enforce Profile Field module.
 */

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\Core\Field\FieldStorageDefinitionInterface;

/**
 * Provide the allowed values for a 'enforce_profile_fiel' field.
 *
 * Callback for options_allowed_values().
 *
 * 'list_*' fields can specify a callback to define the set of their allowed
 * values using the 'allowed_values_function' storage setting.
 *
 * That function will be called:
 *  - either in the context of a specific entity, which is then provided as the
 *    $entity parameter,
 *  - or for the field generally without the context of any specific entity or
 *    entity bundle (typically, Views needing a list of values for an exposed
 *    filter), in which case the $entity parameter is NULL.
 * This lets the callback restrict the set of allowed values or adjust the
 * labels depending on some conditions on the containing entity.
 *
 * For consistency, the set of values returned when an $entity is provided
 * should be a subset of the values returned when no $entity is provided.
 *
 * @param \Drupal\Core\Field\FieldStorageDefinitionInterface $definition
 *   The field storage definition.
 * @param \Drupal\Core\Entity\FieldableEntityInterface|null $entity
 *   (optional) The entity context if known, or NULL if the allowed values are
 *   being collected without the context of a specific entity.
 * @param bool &$cacheable
 *   (optional) If an $entity is provided, the $cacheable parameter should be
 *   modified by reference and set to FALSE if the set of allowed values
 *   returned was specifically adjusted for that entity and cannot not be reused
 *   for other entities. Defaults to TRUE.
 *
 * @return array
 *   The array of allowed values. Keys of the array are the raw stored values
 *   (number or text), values of the array are the display labels. If $entity
 *   is NULL, you should return the list of all the possible allowed values in
 *   any context so that other code (e.g. Views filters) can support the allowed
 *   values for all possible entities and bundles.
 *
 * @ingroup callbacks
 * @see options_allowed_values()
 * @see options_test_allowed_values_callback()
 * @see options_test_dynamic_values_callback()
 */
function enforce_profile_field_allowed_values(FieldStorageDefinitionInterface $definition, FieldableEntityInterface $entity = NULL, &$cacheable = TRUE) {
  // Init values variable.
  $values = [];

  $form_mode = $definition->getSetting('form_mode');

  // $field_definitions = $entity->getFieldDefinitions();

  //$entity->getSetting('form_mode');

  return $values;
}

/**
 * Implements hook_field_widget_info_alter().
 *
 * Perform alterations on Field API widget types to let the Enforce profile
 * field type re-use an existing widget.
 */
function enforce_profile_field_field_widget_info_alter(array &$info) {
  $info['options_select']['field_types'][] = 'enforce_profile_field';
}

/**
 * Implements hook_entity_view_alter().
 */
function enforce_profile_field_entity_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {

  if (!($entity instanceof FieldableEntityInterface) || !$entity->hasField('enforce_profile_field')) {
    return;
  }

  $entity_type = $entity->getEntityTypeId();
}
